close all; clear;
%% Plant Definition
Kg = 10.0;
g1 = tf(1,[1,0]);
g2 = tf(1,[1,1.2]);
g3 = tf(1,[1,6]);
plant = Kg*g1*g2*g3;


%% Requirements
zeta = 0.5;
omg_n = 2.0;
Kv_desired = 50.0;

%% Dominant closed loop poles

% desired system
num_desired = omg_n^2;
den_desired = [1,2*zeta*omg_n, omg_n^2];
desired_plant = tf(num_desired, den_desired);
pole1 = -zeta*omg_n + 1i*omg_n*sqrt(1-zeta^2);
pole2 = -zeta*omg_n - 1i*omg_n*sqrt(1-zeta^2);

[mag, phase] = mag_phase(plant, pole1, 'rad');

%% Lead Compensator Design
theta = acos(zeta);
phi = pi-phase;
gamma = 0.5*(pi-theta-phi);

zc = omg_n*(sin(gamma)/sin(theta+gamma));
pc = omg_n*(sin(gamma+phi)/sin(theta+gamma+phi));

K = 2.915;
compensator1 = K*tf([1,zc],[1,pc]);

%% Lag Compensator Design
Kv_uncompensated = 1.6231;
beta = Kv_desired/Kv_uncompensated;

% Choice of zg
zg = 0.1;

% Computation of pg
pg = zg/beta;

compensator2 = tf([1,zg],[1,pg]);
[mag,phase] = mag_phase(compensator2, pole1, 'rad');

compensated_plant = compensator2*compensator1*plant;
closed_loop_compensated_plant = feedback(compensated_plant,1);

%% Plotting
% Step Response
s = tf('s');
figure(1), step(1/s); hold on; grid on;
figure(1), step(desired_plant/s); hold on; grid on;
figure(1), step(closed_loop_compensated_plant/s); hold on;
xlim([0,15]);

% Pole-Zero Plot
figure(2), pzplot(desired_plant); hold on; grid on;
figure(2), pzplot(closed_loop_compensated_plant); hold on;

% Root-Locus
figure(3), rlocus(compensator1*plant); hold on; grid on;
figure(3), rlocus(compensated_plant); hold on;

function [mag,phase] = mag_phase(sys,x,units)
    
    % sets units to degrees by default
    if nargin < 3 || isempty(units)
        units = 'deg';
    end
    
    % magnitude
    mag = norm(evalfr(sys,x));
    
    % phase [deg]
    phase = atan2d(imag(evalfr(sys,x)),real(evalfr(sys,x)));
    
    % converts phase to radians if necessary
    if strcmpi(units,'rad')
        phase = phase*(pi/180);
    end
    
end
